// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.19.1
// source: order.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "order";

/** 枚举消息类型，使用enum关键词定义 */
export enum OrderStatus {
  /** UNKNOWN - proto3版本中，首成员必须为0,默认值，通常表示未知或未指定 */
  UNKNOWN = 0,
  DOING = 1,
  CACEL = 2,
  DONE = 3,
  REFUND = 4,
  UNRECOGNIZED = -1,
}

export interface CreateOrderResponse {
  order: Order | undefined;
}

export interface GetOrderByUserIdRequest {
  id: number;
}

export interface GetOrderByUserIdResponse {
  order: Order[];
}

export interface Order {
  id: number;
  user: number;
  payable: number;
  status: OrderStatus;
}

export const ORDER_PACKAGE_NAME = "order";

export interface OrderServiceClient {
  create(request: Order, metadata?: Metadata): Observable<CreateOrderResponse>;

  findOrderByUser(request: GetOrderByUserIdRequest, metadata?: Metadata): Observable<GetOrderByUserIdResponse>;
}

export interface OrderServiceController {
  create(
    request: Order,
    metadata?: Metadata,
  ): Promise<CreateOrderResponse> | Observable<CreateOrderResponse> | CreateOrderResponse;

  findOrderByUser(
    request: GetOrderByUserIdRequest,
    metadata?: Metadata,
  ): Promise<GetOrderByUserIdResponse> | Observable<GetOrderByUserIdResponse> | GetOrderByUserIdResponse;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "findOrderByUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
