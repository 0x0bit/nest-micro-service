// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.19.1
// source: user.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface CreateOrUpdateResponse {
  user: User | undefined;
}

export interface GetUserRequest {
}

export interface GetUserResponse {
  users: User[];
}

export interface GetUserByIdRequest {
  id: number;
}

export interface GetUserByIdResponse {
  user: User | undefined;
}

export interface UpdateUserRequest {
  id: number;
  payload: UpdateUserPayload | undefined;
}

export interface UpdateUserPayload {
  password?: string | undefined;
  name?: string | undefined;
}

export interface RemoveUserByIdRequest {
  id: number;
}

export interface RemoveUserByIdResponse {
  user: User | undefined;
}

export interface User {
  id: number;
  username: string;
  password: string;
  name: string;
  age: number;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  create(request: User, metadata?: Metadata): Observable<CreateOrUpdateResponse>;

  findAll(request: GetUserRequest, metadata?: Metadata): Observable<GetUserResponse>;

  findOne(request: GetUserByIdRequest, metadata?: Metadata): Observable<GetUserByIdResponse>;

  update(request: UpdateUserRequest, metadata?: Metadata): Observable<CreateOrUpdateResponse>;

  remove(request: RemoveUserByIdRequest, metadata?: Metadata): Observable<RemoveUserByIdResponse>;
}

export interface UserServiceController {
  create(
    request: User,
    metadata?: Metadata,
  ): Promise<CreateOrUpdateResponse> | Observable<CreateOrUpdateResponse> | CreateOrUpdateResponse;

  findAll(
    request: GetUserRequest,
    metadata?: Metadata,
  ): Promise<GetUserResponse> | Observable<GetUserResponse> | GetUserResponse;

  findOne(
    request: GetUserByIdRequest,
    metadata?: Metadata,
  ): Promise<GetUserByIdResponse> | Observable<GetUserByIdResponse> | GetUserByIdResponse;

  update(
    request: UpdateUserRequest,
    metadata?: Metadata,
  ): Promise<CreateOrUpdateResponse> | Observable<CreateOrUpdateResponse> | CreateOrUpdateResponse;

  remove(
    request: RemoveUserByIdRequest,
    metadata?: Metadata,
  ): Promise<RemoveUserByIdResponse> | Observable<RemoveUserByIdResponse> | RemoveUserByIdResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "findAll", "findOne", "update", "remove"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
